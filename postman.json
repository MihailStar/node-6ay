{
  "info": {
    "_postman_id": "3512632d-503d-42fb-b929-847da3abbb11",
    "name": "node-6ay",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "auth/registration",
      "item": [
        {
          "name": "Request without body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Registration error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(2);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/registration",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "registration"]
            }
          },
          "response": []
        },
        {
          "name": "Request with {}",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Registration error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(2);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/registration",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "registration"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{admin_login}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Registration error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(1);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{admin_login}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/registration",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "registration"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"password\": \"{{admin_password}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Registration error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(1);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"password\": \"{{admin_password}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/registration",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "registration"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{admin_login}}\", \"password\": \"{{admin_password}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"User exists\");\r",
                  "  pm.expect(responseJson.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{admin_login}}\", \"password\": \"{{admin_password}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/registration",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "registration"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "auth/login",
      "item": [
        {
          "name": "Request without body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(2);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with {}",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(2);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{$guid}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(1);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{$guid}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"password\": \"{{$guid}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(1);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"password\": \"{{$guid}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{$guid}}\", \"password\": \"{{$guid}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"User not found\");\r",
                  "  pm.expect(responseJson.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{$guid}}\", \"password\": \"{{$guid}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{admin_login}}\", \"password\": \"{{$guid}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Password not valid\");\r",
                  "  pm.expect(responseJson.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{admin_login}}\", \"password\": \"{{$guid}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{admin_login}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(1);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{admin_login}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"password\": \"{{admin_password}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login error\");\r",
                  "  pm.expect(responseJson.errors).to.be.a(\"array\");\r",
                  "  pm.expect(responseJson.errors).to.have.lengthOf(1);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"password\": \"{{admin_password}}\" }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Request with { \"username\": \"{{admin_login}}\", \"password\": \"{{admin_password}}\" }",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.not.be.error;\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Login successful\");\r",
                  "  pm.expect(responseJson.token).to.be.a(\"string\");\r",
                  "  pm.expect(responseJson.errors).to.be.undefined;\r",
                  "\r",
                  "  pm.collectionVariables.set(\"token\", responseJson.token);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"{{admin_login}}\", \"password\": \"{{admin_password}}\" }\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/login",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "auth/users",
      "item": [
        {
          "name": "Request without authorization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", () => {\r",
                  "  pm.response.to.be.error;\r",
                  "  pm.response.to.have.status(403);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.message).to.eql(\"Authorization error\");\r",
                  "  pm.expect(responseJson.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/users",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Request with authorization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.not.be.error;\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content-Type is application/json\", () => {\r",
                  "  pm.response.to.be.withBody;\r",
                  "  pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response has all properties\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson).to.be.a(\"array\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{port}}/auth/users",
              "host": ["{{base_url}}"],
              "port": "{{port}}",
              "path": ["auth", "users"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost"
    },
    {
      "key": "port",
      "value": "3000"
    },
    {
      "key": "admin_login",
      "value": "fill"
    },
    {
      "key": "admin_password",
      "value": "fill"
    },
    {
      "key": "token",
      "value": "do not fill"
    }
  ]
}
